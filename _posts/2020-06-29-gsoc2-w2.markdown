---
layout: post
title:  "GSoC'20 - Differentiating LPs and QPs"
date:   2020-06-29 14:00:00 -0500
---

# Creating an optimizer layer, implementing MOI tests, and benchmarking with QPTH, CVXPY

Hi all! This blog is one of a series marking my progress in [Differentiable Optimization Problems](https://summerofcode.withgoogle.com/projects/#5232064888045568).  

You may enjoy reading [my first blog](http://www.imakshay.com/post/8). In this post, I will briefly describe the MOI layer we've created over [DiffOpt.jl](https://github.com/AKS1996/DiffOpt.jl) and how we'be made it more robust by adding more tests - both testing interface usage and benchmarking against existing [QPTH](https://github.com/locuslab/qpth) and [CVXPYLayers](https://github.com/cvxgrp/cvxpylayers) projects.


## The project - progress
Milestones completed:
1. Making DiffOpt robust - Implementing [contlinear.jl](https://github.com/jump-dev/MathOptInterface.jl/blob/master/src/Test/contlinear.jl) MOI tests  for linear programs - [PR#19](https://github.com/AKS1996/DiffOpt.jl/pull/19) 
2. Turning DiffOpt to a MOI optimization layer [Issue#12](https://github.com/AKS1996/DiffOpt.jl/issues/12) - [PR#18](https://github.com/AKS1996/DiffOpt.jl/pull/18) 


## What's next?
For the next two weeks, we'll focus on
1. Implementing	tests from [contquadratic.jl](https://github.com/jump-dev/MathOptInterface.jl/blob/master/src/Test/contquadratic.jl)
2. Supporting conic programs in DiffOpt


### Staying in touch
If you're interested in knowing more about the project, join the `#opt-diff-gsoc` channel on [julia slack](https://discourse.julialang.org/t/announcing-a-julia-slack/4866).
